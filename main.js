let map = L.map('map').setView([48.3794, 31.1656], 6);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; OpenStreetMap contributors'
}).addTo(map);

let mode = null;
let tempLine = [];
let cableSegments = [];
let markers = [];
let currentFeature = null;
let cableStart = null;
let boxes = []; // –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–∫—Å–æ–≤ –∏ –º—É—Ñ—Ç
let cables = []; // –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–±–µ–ª—è—Ö

function setMode(m) {
  mode = m;
  tempLine = [];
  cableStart = null;
}

map.on('click', function(e) {
  if (mode === 'box' || mode === 'splice') {
    currentFeature = {
      type: mode,
      latlng: e.latlng,
      id: generateId() // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    };
    boxes.push(currentFeature); // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–∫—Å –∏–ª–∏ –º—É—Ñ—Ç—É –≤ –º–∞—Å—Å–∏–≤
    showInputBox();
  } else if (mode === 'cable') {
    if (cableStart === null) {
      cableStart = e.latlng;
    } else {
      const cableEnd = e.latlng;
      const cableType = document.getElementById('cableType').value;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–±–µ–ª–µ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –Ω–æ–º–µ—Ä–∞–º –±–æ–∫—Å–æ–≤/–º—É—Ñ—Ç
      cables.push({
        from: getBoxId(cableStart), // –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        to: getBoxId(cableEnd), // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        type: cableType
      });

      cableStart = null;
      generateCableTable(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∫–∞–±–µ–ª–µ–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    }
  }
});

function getBoxId(latlng) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  for (let box of boxes) {
    if (isSameLocation(latlng, box.latlng)) {
      return box.id;
    }
  }
  return null;
}

function isSameLocation(latlng1, latlng2) {
  return latlng1.lat === latlng2.lat && latlng1.lng === latlng2.lng;
}

function generateId() {
  return uuid.v4(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º uuid –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
}

function showInputBox() {
  document.getElementById('nameInputContainer').classList.remove('hidden');
  document.getElementById('nodeName').focus();
}

function saveNodeName() {
  const name = document.getElementById('nodeName').value;
  if (name && currentFeature) {
    const iconHtml = currentFeature.type === 'box'
      ? `<div style="color: blue; font-weight: bold;">üü•<br>${name}</div>`
      : `<div style="color: green; font-weight: bold;">üîµ<br>${name}</div>`;

    const icon = L.divIcon({
      html: iconHtml,
      iconSize: [50, 50],
      className: ''
    });

    const marker = L.marker(currentFeature.latlng, {
      icon: icon,
      draggable: true
    }).addTo(map);

    marker.bindPopup(`${name} (${currentFeature.type})`);
    marker.on('click', () => showBoxDetails(currentFeature.id));

    markers.push({marker, name, type: currentFeature.type});
    currentFeature = null;
  }

  document.getElementById('nodeName').value = '';
  document.getElementById('nameInputContainer').classList.add('hidden');
}

function generateCableTable() {
  let table = `<table><thead><tr><th>–û—Ç (ID)</th><th>–ö—É–¥–∞ (ID)</th><th>–¢–∏–ø –∫–∞–±–µ–ª—è</th></tr></thead><tbody>`;
  
  cables.forEach(cable => {
    table += `<tr>
                <td>${cable.from}</td>
                <td>${cable.to}</td>
                <td>${cable.type} –≤–æ–ª–æ–∫–æ–Ω</td>
              </tr>`;
  });
  
  table += `</tbody></table>`;
  document.getElementById('cableTableContainer').innerHTML = table;
}

function showBoxDetails(boxId) {
  const attachedCables = cables.filter(cable => cable.from === boxId || cable.to === boxId);
  let details = `<h3>–ö–∞–±–µ–ª–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –æ–±—ä–µ–∫—Ç—É ${boxId}</h3>`;
  
  if (attachedCables.length === 0) {
    details += '<p>–ö —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫–∞–±–µ–ª–µ–π.</p>';
  } else {
    details += `<table><thead><tr><th>–û—Ç (ID)</th><th>–ö—É–¥–∞ (ID)</th><th>–¢–∏–ø –∫–∞–±–µ–ª—è</th></tr></thead><tbody>`;
    
    attachedCables.forEach(cable => {
      details += `<tr>
                    <td>${cable.from}</td>
                    <td>${cable.to}</td>
                    <td>${cable.type} –≤–æ–ª–æ–∫–æ–Ω</td>
                  </tr>`;
    });
    
    details += `</tbody></table>`;
  }
  
  document.getElementById('modalContent').innerHTML = details;
  document.getElementById('modal').style.display = 'block';
}

function closeModal() {
  document.getElementById('modal').style.display = 'none';
}
